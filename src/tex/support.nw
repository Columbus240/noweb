\documentstyle[noweb,twoside]{article}
\pagestyle{noweb}\raggedbottom
\noweboptions{longchunks}
\title{{\TeX} support for {\tt noweb}}
\author{Norman Ramsey}
\begin{document}
\maketitle
\tableofcontents
@
This document describes the {\TeX} code that supports {\tt noweave}
and {\tt noweb}.  Those interested in customizing their output should
focus on Section~\ref{section:sty}.
\section{Basic {\TeX} support for {\tt noweb}}
This basic code is used for both {\TeX} and {\LaTeX}.
The first step is to define [[\codehsize]], which is the width in
which code is set, and [[\codemargin]], which is the amount by which
it is indented.
<<kernel>>=
% make \hsize in code sufficient for 88 columns
\setbox0=\hbox{\tt m}
\newdimen\codehsize
\codehsize=91\wd0 % 88 columns wasn't enough; I don't know why
\newdimen\codemargin
\codemargin=0pt
@ %def \codehsize \codemargin

Most code is set in an environment in which [[\setupcode]] has been
executed.
In this environment, only [[\]], [[{]], and [[}]] have their usual
categories; every other character represents itself.
Appropriate [[\chardef]]s ensure that the special characters can be
escaped with a backslash.
<<kernel>>=
\chardef\other=12
\def\setupcode{%
  \chardef\\=`\\
  \chardef\{=`\{
  \chardef\}=`\}
  \catcode`\$=\other
  \catcode`\&=\other
  \catcode`\#=\other
  \catcode`\%=\other
  \catcode`\~=\other
  \catcode`\_=\other
  \catcode`\^=\other
  \obeyspaces\Tt
}
@ %def \setupcode 
[[\eatline]] is used to consume newlines that should be ignored,
for example, the newlines at the end of [[@ %def ]]{\em identifiers} lines.
I can't remember what [[\startline]] or [[\newlines]] are for; I don't
think {\tt noweave} ever emits them.
<<kernel>>=
{\catcode`\^^M=\active % make CR an active character
  \gdef\newlines{\catcode`\^^M=\active % make CR an active character
         \def^^M{\par\startline}}%
  \gdef\eatline#1^^M{\relax}%
}
%%% DON'T   \gdef^^M{\par\startline}}% in case ^^M appears in a \write
\def\startline{\noindent\hskip\parindent\ignorespaces}
@ %def \startline \eatline

Within a code environment, it may be necessary to restore the 
category codes in order to set a module (chunk) name.
<<kernel>>=
{\obeyspaces\global\let =\ } % from texbook, p 381
\def\setupmodname{%
  \catcode`\$=3
  \catcode`\&=4
  \catcode`\#=6
  \catcode`\%=14
  \catcode`\~=13
  \catcode`\_=8
  \catcode`\^=7
  \catcode`\ =10
  \catcode`\^^M=5
  \Rm}
@ %def \setupmodname
@ \sublabel{ref:fred}

{\tt noweave} brackets uses of chunk names with [[\LA]] and [[\RA]], which
handle the angle brackets, font, and environment.
<<kernel>>=
\def\LA{\begingroup\setupmodname\It$\langle${}}
\def\RA{\/$\rangle$\endgroup}
\def\code{\leavevmode\begingroup\setupcode\newlines}
\def\edoc{\endgroup}
@ %def \LA \RA \code \edoc

[[\equivbox]] and [[\plusequivbox]] are used to set the
``\unhcopy\equivbox''
and ``\unhcopy\plusequivbox'' that open a chunk definition or its
continuation.
{\tt noweave} brackets definitions of chunk names with [[\moddef]] and
either [[\endmoddef]] or [[\plusendmoddef]].
<<kernel>>=
\newbox\equivbox
\setbox\equivbox=\hbox{$\equiv$}
\newbox\plusequivbox
\setbox\plusequivbox=\hbox{$\mathord{+}\mathord{\equiv}$}
% \moddef can't have an argument because there might be \code...\edoc
\def\moddef{\leavevmode\kern-\codemargin\LA}
\def\endmoddef{\RA\unhcopy\equivbox}
\def\plusendmoddef{\RA\unhcopy\plusequivbox}
@ %def \equivbox \plusequivbox \moddef \endmoddef \plusendmoddef
<<kernel>>=
\def\chunklist{%
\errhelp{I changed \chunklist to \nowebchunks.  
I'll try to avoid such incompatible changes in the future.}%
\errmessage{Use \string\nowebchunks\space instead of \string\chunklist}}
\def\nowebchunks{\message{<Warning: You need noweave -x to use \string\nowebchunks>}}
\def\nowebindex{\message{<Warning: You need noweave -idx to use \string\nowebindex>}}
@ %def \chunklist \nowebchunks \nowebindex
<<kernel>>=
% here is support for the new-style (capitalized) font-changing commands
% thanks to Dave Love
\ifx\documentstyle\undefined
  \let\Rm=\rm \let\It=\it \let\Tt=\tt       % plain
\else\ifx\selectfont\undefined
  \let\Rm=\rm \let\It=\it \let\Tt=\tt       % LaTeX OFSS
\else                                       % LaTeX NFSS
  \def\Rm{\fontfamily\rmdefault \fontseries\default@series
    \fontshape\default@shape \selectfont}
  \def\It{\fontfamily\itdefault \fontseries\default@series
    \fontshape\default@shape \selectfont}
  \def\Tt{\fontfamily\ttdefault \fontseries\default@series
    \fontshape\default@shape \selectfont}
\fi
\fi
@
\clearpage
\section{The {\tt noweb} document-style option for {\LaTeX}}
\label{section:sty}
{\LaTeX} support begins with the kernel shown above.
<<noweb.sty>>=
<<kernel>>
@
\subsection{Support for noweb options}
<<noweb.sty>>=
\def\noweboptions#1{%
  \def\@nwoptionlist{#1}%
  \@for\@nwoption:=\@nwoptionlist\do{%
    \@ifundefined{nwopt@\@nwoption}{%
        \@latexerr{There is no such noweb option as '\@nwoption'}\@eha}{%
        \csname nwopt@\@nwoption\endcsname}}}
@
\subsection{Adjusting placement of code on the page}
{\LaTeX} requires a larger [[\codehsize]] because 
code is indented by [[\codemargin]].
<<noweb.sty>>=
\codemargin=10pt
\advance\codehsize by \codemargin       % make room for indentation of code
@
[[\noweboptions{shift}]] is used to shift the whole page left to make room for
the wide code lines.
It may be emitted by {\tt noweave -shift}, or it might be given by a user.
<<noweb.sty>>=
\def\nwopt@shift{%
  \dimen0=-0.8in
  \if@twoside                 % Values for two-sided printing:
     \advance\evensidemargin by \dimen0
  \else                       % Values for one-sided printing:
     \advance\evensidemargin by \dimen0
     \advance\oddsidemargin by \dimen0
  \fi
}
\def\nwopt@noshift{}
@ %def shift noshift

\iffalse
<<man page: [[\noweboptions]]>>=
.TP
.B shift
Shift the output text to the left so that long code lines won't extend
off the right-hand side of the page, as in
.B noweave \-shift.
@ \fi

\subsection{Environments for setting code}
[[\@begincode]] is probably cribbed from some early version of
{\LaTeX}'s [[verbatim]] environment.
[[\nowebsize]] governs the size at which code is set; users who want
to minimize code can [[\let\nowebsize=\small]].
If I ever understood why all the rest of that crap is here, I don't now.
<<noweb.sty>>=
\def\@begincode{\parindent\z@\parfillskip\@flushglue\parskip\z@
  \item[]\vskip\parskip
  \def\baselinestretch{1.0}\small\nowebsize
  \leftskip\@totalleftmargin\rightskip\z@
  \advance\leftskip\codemargin
  \@tempswafalse \def\par{\if@tempswa\hbox{}\fi\@tempswatrue\@@par}%
  \obeylines \Tt \catcode``=13 \@noligs \setupcode}
\let\nowebsize=\normalsize
@ %def \@begincode \nowebsize

[[\begincode]] and [[\endcode]] are used by {\tt noweave} to bracket
code chunks.
The [[webcode]] environment is intended for users who want to paste
{\tt noweave} output into papers.

[[\noindent]] puts {\LaTeX} into horizontal mode so that lines can follow without
indentation if there is no following [[\par]].  The [[\hfil]] afterwards is
some glue so that it there are lines following immediately, it will
be possible to break there.  If I forced a break with [[\break]], that
would be wrong because a following [[\par]] would leave us with an
underfull (empty!) hbox.
<<noweb.sty>>=
\def\begincode#1{\par\vskip3pt
    \penalty500
    \noindent\hbox to \hsize\bgroup\begin{minipage}{\codehsize}%
    \begin{trivlist}\@begincode \frenchspacing\@vobeyspaces\parskip=\z@}
\def\endcode{\end{trivlist}\vskip0.1pt\@endparenv\end{minipage}\hss\egroup\hfil}

\newenvironment{webcode}{%
      \par\vskip3pt\noindent\hbox to \hsize\bgroup\begin{minipage}{\codehsize}%
             \begin{trivlist}\@begincode \frenchspacing\@vobeyspaces}{%
      \strut\end{trivlist}\vskip0.1pt\end{minipage}\hss\egroup\hfil}
@ %def \begincode \endcode webcode 

Within a code environment, margin tags might be used to mark sub-page
numbers in the margins:
<<noweb.sty>>=
\def\nwopt@nomargintag{\let\nwmargintag=\@gobble}
\def\nwopt@margintag{%
  \def\nwmargintag##1{\leavevmode\llap{##1\kern0.3in\kern\codemargin}}}
\nwopt@margintag
@ %def \nwmargintag margintag nomargintag 
\iffalse
<<man page: [[\noweboptions]]>>=
.TP
.B margintag
Put the sub-page number (tag) of each code-chunk definition in the
left margin. (Default)
.TP
.B nomargintag
Don't use margin tags.
@ \fi

{\tt noweave} uses [[\begindocs{nnn}]] and [[\enddocs]] to bracket
documentation chunks.
If a documentation chunk does not continue the current paragraph, 
{\tt noweave} inserts [[\nwdocspar]], which in turn uses
[[\@maybreak]] in an attempt to keep the documentation chunk on the
same page as the code chunk that follows it.
<<noweb.sty>>=
\def\@maybreak#1{\vskip0pt plus #1\penalty-500\vskip0pt plus -#1}
\newcommand{\maybreak}{\@maybreak}
\def\begindocs#1{\relax\ifvmode\@maybreak{1in}\fi}
\def\enddocs{\relax}
\def\nwdocspar{\par\@maybreak{1in}}
@ %def \@maybreak \maybreak \begindocs \nwdocspar \enddocs

{\tt noweave} brackets quoted code with [[\code]] and [[\edoc]], which handle
font and environment for code.
Because quoted code often appears in arguments, {\tt noweave} now
(with version 2.5)
escapes all {\TeX} specials within it, so the category-code changes
aren't strictly necessary.
<<noweb.sty>>=
\def\code{\leavevmode\begingroup\setupcode\@vobeyspaces\obeylines}
\def\edoc{\endgroup} 
@ %def \code \edoc
@
\subsection{The {\tt noweb} page style}
Headers contain file name, date, and page number.
{\tt noweave} emits [[\filename{]]{\em name}[[}]] for each new file.
In the {\tt noweb} page style, new files cause page breaks;
otherwise they are ignored.
<<noweb.sty>>=
\newdimen\@original@textwidth
\@original@textwidth=\textwidth

\def\ps@noweb{%
  \let\@mkboth\@gobbletwo
  \def\@oddfoot{}\def\@evenfoot{}%       No feet.
  \if@twoside         % If two-sided printing.
    \def\@evenhead{\hbox to \@original@textwidth{%
           \Rm \thepage\qquad{\Tt\leftmark}\hfil\today}}%        Left heading.
    \def\@oddhead{\hbox to \@original@textwidth{%
           \Rm \today\hfil{\Tt\leftmark}\qquad\thepage}}% Right heading.
  \else               % If one-sided printing.
    \def\@oddhead{\hbox to \@original@textwidth{%
           \Rm \today\hfil{\Tt\leftmark}\qquad\thepage}}% Right heading.
    \let\@evenhead\@oddhead
  \fi
  \def\chaptermark##1{}%
  \def\sectionmark##1{}%
  \def\subsectionmark##1{}%
  \def\subsubsectionmark##1{}%
  \def\paragraphmark##1{}%
  \def\subparagraphmark##1{}%
  \def\filename##1{\vfil\eject\markboth{##1}{##1}}%
}
\let\filename=\@gobble
@ %def \@original@textwidth \ps@noweb \filename
@
\subsection{Chunk cross-reference}
[[\nwalsodefined]], [[\nwused]], and [[\nwnotused]] are emitted by the {\tt
noweb} cross-referencers. (What arguments?)
If unused chunks are output chunks, a filter can slip in
[[\let\nwnotused\nwoutput]].
The style uses [[\nwcodecomment]] for all annotations that follow code
chunks.
Fiddling with it can change the appearance of the output.
<<noweb.sty>>=
\newdimen\nw@originaltextsize
\nw@originaltextsize=\hsize
\def\nwcodecomment#1{\@@par
    \hspace{-\codemargin}{%
        \hsize=\nw@originaltextsize\textwidth=\nw@originaltextsize
        \advance\rightskip by 0pt plus1in
        \let\\\relax\footnotesize\Rm #1\hfil\@@par}}
\def\nwalsodefined#1{\nwcodecomment{This definition is continued on \@pagesl{#1}.}}
\def\nwused#1{\nwcodecomment{This code is used on \@pagesl{#1}.}}
\def\nwnotused#1{\nwcodecomment{Root chunk (not used in this document).}}
\def\nwoutput#1{\nwcodecomment{This code is written to file {\Tt #1}.}}
@ %def \nw@originaltextsize \nwcodecomment \nwalsodefined \nwused \nwnotused
@ %def \nwoutput
<<noweb.sty>>=
\newcount\@nwlopage\newcount\@nwhipage  % range lo..hi-1
\newcount\@nwlosub		% subpage of lo
\def\@nwfirstpage#1#2{% subpage page
  \@nwlopage=#2 \@nwlosub=#1
  \advance\@nwpagecount by 1
%%% \message{(* first page is \@subpagenum{#1}{#2} *)}%
  <<$[[\@nwhipage]] := [[\@nwlopage]]+1$>>}
\def\@nwfirstpagel#1{% label
  \edef\@tempax{\noexpand\@nwfirstpage\subpagepair{#1}}\@tempax}
\def\@nwnextpage#1#2{% subpage page
%%% \message{(* next page is  \@subpagenum{#1}{#2} *)}%
  \ifnum\@nwhipage=#2 
    \advance\@nwhipage by 1 \advance\@nwpagecount by 1 \@nwlosub=0 \else
  \ifnum#2<\@nwlopage <<new range starting with [[#2]]>>\else
  \ifnum#2>\@nwhipage <<new range starting with [[#2]]>>\else
    \@nwlosub=0
  \fi\fi\fi
  }
\def\@nwnextpagel#1{% label
  \edef\@tempay{\noexpand\@nwnextpage\subpagepair{#1}}\@tempay}
<<new range starting with [[#2]]>>=
<<add range to range list>>%
\@nwfirstpage{#1}{#2}
<<$[[\@nwhipage]] := [[\@nwlopage]]+1$>>=
\@nwhipage=\@nwlopage\advance\@nwhipage by 1 
<<add range to range list>>=
<<set [[\@tempaz]] to page range>>
%%% \message{(* adding page range \@tempaz *)}%
\edef\@tempa{\noexpand\nwix@cons\noexpand\nw@pages
                {\noexpand\\{\@tempaz}}}\@tempa
<<set [[\@tempaz]] to page range>>=
\advance\@nwhipage by -1
\ifnum\@nwhipage=\@nwlopage
     \edef\@tempaz{\@subpagenum{\number\@nwlosub}{\number\@nwlopage}}%
\else
  \ifnum\@nwlopage<110 <<normal range>>\else
    \count255=\@nwlopage \divide\count255 by 100 \multiply\count255 by 100
    \ifnum\count255=\@nwlopage <<normal range>>\else
      \count255=\@nwlopage \divide\count255 by 100
      \@nwpagetemp=\@nwhipage \divide\@nwpagetemp by 100
      \ifnum\count255=\@nwpagetemp %  lo--least 2 digits of hi
        \multiply\@nwpagetemp by 100
        \advance \@nwhipage by -\@nwpagetemp
        <<normal range>>%
      \else <<normal range>>%
      \fi
    \fi
  \fi
\fi
<<normal range>>=  
\edef\@tempaz{\number\@nwlopage--\number\@nwhipage}
<<noweb.sty>>=
\newcount\@nwpagetemp
@
<<noweb.sty>>=
\newcount\@nwpagecount
\def\@pagesl#1{%  list of labels
  \gdef\nw@pages{}\@nwpagecount=0
  \def\\##1{\@nwfirstpagel{##1}\let\\=\@nwnextpagel}#1%
  <<add range to range list>>\let\\=\relax
  \ifnum\@nwpagecount=1 page \else pages \fi\commafy{\nw@pages}}
\def\subpages#1{% list of {{subpage}{page}}
  \gdef\nw@pages{}\@nwpagecount=0
  \def\\##1{\edef\@tempa{\noexpand\@nwfirstpage##1}\@tempa
            \def\\####1{\edef\@tempa{\noexpand\@nwnextpage####1}\@tempa}}#1%
  <<add range to range list>>\let\\=\relax
  \ifnum\@nwpagecount=1 page \else pages \fi\commafy{\nw@pages}}
@ %def \@nwlopage \@nwhipage
@
\subsection{Sub-page references}
This is the wonderful code that Dave Love provided to make page
references like 7a, 7b, and so on.

This code
provides a mechanism for defining `page
sub-references' using [[\sublabel{foo}]] referenced with
[[\subpageref{foo}]].  Sub-references will be numbered like these real
examples: \subpageref{ref:foo}, \subpageref{ref:bar},
\subpageref{ref:baz}\sublabel{ref:foo}\sublabel{ref:bar}\sublabel{ref:baz}
etc.\ unless there is only one on the page, in which case the letter
will be dropped like this: \subpageref{ref:fred}.

To be able to use [[\subpageref]] we must define the label with
[[\sublabel]], used like label.  (Using
[[\ref]] with a label defined by [[\sublabel]] will
produce the sub-reference number, by the way, and [[\pageref]]
works as expected.)  Note that
[[\subpageref]] is robust and [[\ref]] and [[\pageref]] are redefined to be
robust also, as they will be in future \LaTeX{} releases.
Incidentally, these expand to the relevant text plus [[\null]]---you
might want to strip this off, e.g.\ for sorting lists.


There are various ways we could attack this task (which is made
non-trivial by the well-known asynchrony of (La)\TeX's output
routine).  There are various ways we might tackle the problem, but
they all must depend on hacks in the [[.aux]] file or a similar one.
Joachim Schrod's [[fnpag.sty]] does the same sort of thing differently
to this \LaTeX-specific approach.  See [[latex.tex]] for enlightenment
on the cross-referencing mechanism and the \LaTeX{} internals used
below.

@
The [[\subpageref]] macro first does a normal [[\pageref]].  If the
reference is actually defined, it then goes on to check whether the
control sequence [[2on]]\LA{}{page referenced}\RA{} is defined and sets the
[[\ref]] value to get [[a]] etc.\ if so.  The magic, of course, is in
defining the [[2on]] bit appropriately.
<<noweb.sty>>=
\newcommand{\subpageref}[1]{%
  \@ifundefined{r@#1}%
    {\pageref{#1}}%
    {\@ifundefined{2on\@pageref{#1}}%
      {\pageref{#1}}%
      {\expandafter\expandafter\expandafter\@subpagenum\csname r@#1\endcsname}}}
\def\@subpagenum#1#2{#2\ifnum#1=0 \else\@alph{#1}\fi}
@ %def \subpageref
[[\subpagepair]] produces a [[{subpage}{page}]] pair.
<<noweb.sty>>=
\newcommand{\subpagepair}[1]{%  % produces {subpage}{page}
  \@ifundefined{r@#1}%
    {{0}{0}<<warn of undefined reference to [[#1]]>>}%
    {\@ifundefined{2on\@pageref{#1}}%
      {{0}{\expandafter\expandafter\expandafter\@cdr\csname r@#1\endcsname\@nil}}%
      {\@nameuse{r@#1}}}}
\let\@tempaxxx\relax
@
[[\@pageref]] is like [[\pageref]], but it expands to [[\relax]] without a warning
if the reference is undefined.
<<noweb.sty>>=
\def\@pageref#1{\expandafter\expandafter\expandafter
                \@cdr\csname r@#1\endcsname\@nil}
@ %def \@pageref
@
[[\sublabel]] is like the [[\label]] command, except that it writes
[[\newsublabel]] onto the [[.aux]] file rather than [[\newlabel]].
<<noweb.sty>>=
\newcommand{\sublabel}[1]{%
  \@bsphack\if@filesw {\let\thepage\relax
   \def\protect{\noexpand\noexpand\noexpand}%
   \edef\@tempa{\write\@auxout{\string
      \newsublabel{#1}{{}{\thepage}}}}%
   \expandafter}\@tempa
   \if@nobreak \ifvmode\nobreak\fi\fi\fi\@esphack}
@ %def \sublabel
@
[[\newsublabel]] is the macro that does the important work.  It is called with the
same sort of arguments as [[\newlabel]]: the first argument is the
label name and the second is [[{]]\LA ref value[[}{]]page number\RA[[}]].
(Note that the only definition here which needs to be
global is the one which is, and that [[\global]] is redefined by
[[\enddocument]], which will bite you if you use it\dots)
<<noweb.sty>>=
<<definition of [[\newsublabel]]>>
@
First we extract the page number into [[\this@page]].
<<definition of [[\newsublabel]]>>=
\newcommand{\newsublabel}[2]{%
  \edef\this@page{\@cdr#2\@nil}%
@ %def \newsublabel
@
Then we see whether it's greater than the value of [[\last@page]]
which was stashed away by the last [[\newsublabel]] (or is zero if
this is the first one).  If the page has changed, we reset the
counter [[\sub@page]] telling us how many sub-labels there have been
on the page.
<<definition of [[\newsublabel]]>>=
  \ifnum\this@page>\last@page
    \sub@page=0\relax
  \fi
  \last@page=\this@page
  \advance\sub@page by 1
@
If we've had at least two on the page, we define the 
[[2on]]\LA{}{page no.}\RA{} macro to indicate the fact.
<<definition of [[\newsublabel]]>>=
  \ifnum\sub@page=2
    \global\@namedef{2on\this@page}{}%
  \fi
@
Then we write a normal [[\newlabel]] with the sub-reference as the
normal reference value in the second argument.
<<definition of [[\newsublabel]]>>=
  \edef\@tempa{\noexpand\newlabel{#1}%
    {{\number\sub@page}{\this@page}}}%
  \@tempa}
@
We need to define these counters.  [[\last@page]] could be a
suitably-initialised macro instead.
<<noweb.sty>>=
\newcount\last@page
\newcount\sub@page
@ %def \last@page \sub@page
@
We use Rainer's new expandable definitions of [[\ref]] and
[[\pageref]] to minimise the risk of nasty surprises.
<<noweb.sty>>=
% RmS 92/08/14: made \ref and \pageref robust
\def\ref#1{\@ifundefined{r@#1}{{\bf ??}<<warn of undefined reference to [[#1]]>>}%
    {\expandafter\expandafter\expandafter
     \@car\csname r@#1\endcsname\@nil\null}}
\def\pageref#1{\@ifundefined{r@#1}{{\bf ??}<<warn of undefined reference to [[#1]]>>}%
     {\expandafter\expandafter\expandafter
      \@cdr\csname r@#1\endcsname\@nil\null}}
\def\@refpair#1{\@ifundefined{r@#1}{{0}{0}<<warn of undefined reference to [[#1]]>>}%
    {\@nameuse{r@#1}}}
<<warn of undefined reference to [[#1]]>>=
\@warning{Reference `#1' on page \thepage \space undefined}
@ %def \ref \pageref
@
\subsection{Indexing (identifier cross-reference) support}

\subsubsection{Tracking definitions and uses}
Both definitions and uses of identifiers may be either ``bound'' or
``free.''
A bound definition or use appears within a code chunk and is associated
with the sub-page number of that code chunk.
A free definition or use appears within a documentation chunk and is associated
with the number of the page on which it appears.
The control sequences used are
<<noweb.sty>>=
% \boundindexdefn{printable name}{identifying label}{label of chunk}
% \freeindexdefn{printable name}{identifying label}
% \boundindexuse{printable name}{identifying label}{label of chunk}
% \freeindexuse{printable name}{identifying label}

\def\boundindexdefn#1#2#3{\@auxixb{\protect\nwixd}{#2}{#3}}
\def\boundindexuse#1#2#3{\@auxixb{\protect\nwixu}{#2}{#3}}
\def\freeindexdefn#1#2{\@auxixf{\protect\nwixd}{#2}}
\def\freeindexuse#1#2{\@auxixf{\protect\nwixu}{#2}}

\def\@auxixb#1#2#3{\@auxix{#1}{#2}{\protect\subpagepair{#3}}}
\def\@auxixf#1#2#3{\@auxix{#1}{#2}{{0}{\thepage}}}
\def\@auxix#1#2#3{% {marker}{label}{{subpage}{page}}
   \@bsphack\if@filesw {\let\thepage\relax\let\subpageref\relax
   \let\nwixd\relax\let\nwixu\relax
   \def\protect{\noexpand\noexpand\noexpand}%
   \edef\@tempa{\write\@auxout{\string
      \nwixadd{#1}{#2}{#3}}}%
   \expandafter}\@tempa
   \if@nobreak \ifvmode\nobreak\fi\fi\fi\@esphack}
@ %def \boundindexdefn \boundindexuse \freeindexdefn \freeindexuse
@ %def \@auxixb \@auxixf \@auxix
<<noweb.sty>>=
% \nwixadd{marker}{idlabel}{\subpagepair{label}}
\def\nwixadd#1#2#3{%
  \@ifundefined{nwixl@#2}%
    {\global\@namedef{nwixl@#2}{#1{#3}}}%
    {\expandafter\nwix@cons\csname nwixl@#2\endcsname{#1{#3}}}}
@ %def \nwixadd
<<noweb.sty>>=
\chardef\nwbs=`\\
@
\subsubsection{Supporting a mini-index at the end of each chunk}
<<noweb.sty>>=
% \identdefs{\\{name 1}\\{{name 2}\\...\\{name n}}
%    Defines name 1, name 2, name n.
% \identuses{\\{name 1\indexrefs{label 1}}\\...\\{name n\indexrefs{label n}}}
%    Uses name 1 page page page, ..., name n page.
% \indexpages{identifying label}
%    expands to list of page references
% \indexlisting{name}{label}
%    what actually appears in an index

\def\identdefs#1{\nwcodecomment{Defines \Tt\commafy{#1}.}}
\def\identuses#1{\nwcodecomment{Uses \Tt\commafy{#1}.}}

\def\indexrefs#1{{\Rm~\let\@elt=~\@nameuse{nwixdef@#1}}}
\def\indexpages#1{{\def\@elt{, }\@nameuse{nwixall@#1}}}
\def\indexlisting#1#2{{\parindent=-10pt \parskip=0pt 
        \advance\leftskip by 10pt 
        \advance\rightskip by 0pt plus1in
        \indent
        {\Tt #1}: \indexpages{#2}\par}}
@ %def \identdefs \identuses \indexrefs \indexpages \indexlisting
@
This goo attempts to support good comma separation.
<<noweb.sty>>=
\newcount\@commacount
\def\commafy#1{%
  {\nwix@listcount{#1}\@commacount=\nwix@counter
   \let\@comma@each=\\%
   \ifcase\@commacount\let\\=\@comma@each\or\let\\=\@comma@each\or
     \def\\{\def\\{ and \@comma@each}\@comma@each}\else
     \def\\{\def\\{, %
                   \advance\@commacount by -1
                   \ifnum\@commacount=1 and \fi\@comma@each}\@comma@each}\fi
   #1}}
@ %def \@commacount \commafy

\subsection{New, improved index code}
There are two kinds of lists.
One kind is a generic list in which elements are preceded by [[\\]].
If the elements are index elements, they are {\em[[{]]printable
identifier[[}{]]label[[}]]} pairs.
The other kind is a list of calls to [[\subpagepair]], in which each 
element is preceded by either [[\nwixd]] or [[\nwixu]].
<<noweb.sty>>=
\def\nwix@cons#1#2{% {list}{\marker{element}}
  {\toks0=\expandafter{#1}\def\@tempa{#2}\toks2=\expandafter{\@tempa}%
   \xdef#1{\the\toks0 \the\toks2 }}}
@ %def \nwix@cons
The reference list for an identifier labelled {\em id}
is always called [[\nwixl@]]{\em id}.
Most applications will work with reference lists by applying [[\\]]
either to the defs or to the uses.
<<noweb.sty>>=
\def\nwix@uses#1{% {label}
  \def\nwixu{\\}\let\nwixd\@gobble\@nameuse{nwixl@#1}}
\def\nwix@defs#1{% {label}
  \def\nwixd{\\}\let\nwixu\@gobble\@nameuse{nwixl@#1}}
@ %def \nwix@uses \nwix@defs

Some applications count uses to see whether there is any need to
display information.
<<noweb.sty>>=
\newcount\nwix@counter
\def\nwix@listcount#1{% {list with \\}
  {\count255=0
   \def\\##1{\advance\count255 by 1 }%
   #1\global\nwix@counter=\count255 }}
\def\nwix@usecount#1{\nwix@listcount{\nwix@uses{#1}}}
\def\nwix@defcount#1{\nwix@listcount{\nwix@defs{#1}}}
@ %def \nwix@listcount \nwix@usecount \nwix@defcount
@
When displaying identifiers used, show the identifier and its
definitions.
<<noweb.sty>>=
\def\nwix@id@defs#1{% index pair
  {{\Tt \@car#1\@nil}%
  \def\\##1{~\@subpageofsubpair{##1}}\nwix@defs{\@cdr#1\@nil}}}
\def\nwidentuses#1{% list of index pairs
  \nwcodecomment{Uses \let\\=\nwix@id@defs\commafy{#1}.}}
@ %def \nwidentuses \nwix@id@defs
The definitions section is a bit more complex, because it is omitted
if none of the identifiers defined is ever used.
<<noweb.sty>>=
\def\nwix@totaluses#1{% list of index pairs
  {\count255=0
   \def\\##1{\nwix@usecount{\@cdr##1\@nil}\advance\count255 by\nwix@counter}%
   #1\global\nwix@counter\count255 }}
\def\nwix@id@uses#1#2{% {ident}{label}
  \nwix@usecount{#2}\ifnum\nwix@counter>0
    {\advance\leftskip by \codemargin
     \nwcodecomment{{\Tt #1}, used on \subpages{\nwix@uses{#2}}.}}%
  \fi}
\def\nwidentdefs#1{% list of index pairs
  \nwix@totaluses{#1}\ifnum\nwix@counter>0
    \nwcodecomment{Defines:}%
    {\def\\##1{\nwix@id@uses ##1}#1}%
  \fi}
<<noweb.sty>>=
\def\@subpageofsubpair#1{%
  \edef\@tempa{\noexpand\@subpagenum #1}\@tempa}
\def\nw@underlinedefs{% {list with \nwixd, \nwixu}
  \let\\=\relax\def\nw@comma{, }
  \def\nwixd##1{\\\underline{\@subpageofsubpair{##1}}\let\\\nw@comma}%
  \def\nwixu##1{\\\@subpageofsubpair{##1}\let\\\nw@comma}}

\def\nw@indexline#1#2{%
   {\indent {\Tt #1}: \nw@underlinedefs\@nameuse{nwixl@#2}\par}}
\newenvironment{thenowebindex}{\parindent=-10pt \parskip=0pt 
        \advance\leftskip by 10pt 
        \advance\rightskip by 0pt plus1in\par
    \def\\##1{\nw@indexline##1}}{}
@
\subsection{Support for chunk and identifier indices}
<<noweb.sty>>=
\def\nwixlogsorted#1#2{% list data
   \@bsphack\if@filesw {\let\thepage\relax\let\subpageref\relax
   \let\nwixd\relax\let\nwixu\relax\let\code\relax\let\edoc\relax
   \let\\\relax\let\{\relax\let\}\relax
   \def\protect{\noexpand\noexpand\noexpand}%
   \edef\@tempa{\write\@auxout{\string
      \nwixadds{#1}{#2}}}%
   \expandafter}\@tempa
   \if@nobreak \ifvmode\nobreak\fi\fi\fi\@esphack}
\def\nwixlogsorted#1#2{% list data
   \@bsphack\if@filesw 
     \toks0={#2}\immediate\write\@auxout{\string\nwixadds{#1}{\the\toks0}}
   \if@nobreak \ifvmode\nobreak\fi\fi\fi\@esphack}
@ %def \boundindexdefn \boundindexuse \freeindexdefn \freeindexuse
@ %def \@auxixb \@auxixf \@auxix

[[nwixs@c]] and [[nwixs@i]] are sorted lists of chunks and identifiers, respectively.
<<noweb.sty>>=
\def\nwixadds#1#2{%
  \@ifundefined{nwixs@#1}%
    {\global\@namedef{nwixs@#1}{\\{#2}}}%
    {\expandafter\nwix@cons\csname nwixs@#1\endcsname{\\{#2}}}}
@
<<noweb.sty>>=
\def\nowebchunks{%
  \thenowebchunks{\@nameuse{nwixs@c}}}
\@namedef{r@nw@notdef}{{}{(never defined)}}

\def\nw@chunkunderlinedefs{% {list of labels with \nwixd, \nwixu}
  \let\\=\relax\def\nw@comma{, }
  \def\nwixd##1{\\\underline{\subpageref{##1}}\let\\\nw@comma}%
  \def\nwixu##1{\\\subpageref{##1}\let\\\nw@comma}}

\def\nw@onechunk#1#2#3{% {name}{label of first definition}{list with \nwixd, \nwixu}
  \@ifundefined{r@#2}{}{%
    \indent\LA #1~{\footnotesize\Rm\subpageref{#2}}\RA 
    \if@nwlongchunks{~\nw@chunkunderlinedefs#3}\fi\par}}

\def\thenowebchunks#1{\vskip3pt{%
  \parskip=0pt\parindent=-10pt \advance\leftskip by 10pt
  \advance\rightskip by 0pt plus10pt
  \def\\##1{\nw@onechunk##1}#1}}
<<noweb.sty>>=
\newif\if@nwlongchunks
\@nwlongchunksfalse
\let\nwopt@longchunks\@nwlongchunkstrue
@ \iffalse
<<man page: [[\noweboptions]]>>=
.TP
.B longchunks
When expanding 
.B "\\\\nowebchunks,"
show page numbers of definitions and uses of each chunk.
@ \fi

<<noweb.sty>>=
\def\nowebindex{%
  \begin{thenowebindex}\@nameuse{nwixs@i}\end{thenowebindex}}
@
\clearpage
\section{The {\tt nwmac} macros for use with plain {\TeX}}
<<nwmac.tex>>=
%\magnification=\magstephalf
% scale cmbx10 instead of using cmbx12 because {\LaTeX} does, so fonts exist
\font\twlbf=cmbx10 scaled \magstep1
\font\frtbf=cmbx10 scaled \magstep2
% These fonts don't work with xdvi!

\advance\hoffset 0.5 true in
\advance\hsize -1.5 true in
\newdimen\textsize
\textsize=\hsize
\def\today{\ifcase\month\or
  January\or February\or March\or April\or May\or June\or
  July\or August\or September\or October\or November\or December\fi
  \space\number\day, \number\year}
@ %def \textsize \today
<<nwmac.tex>>=
\long\def\ifundefined#1#2#3{%
   \expandafter\ifx\csname#1\endcsname\relax
       #2%
   \else#3%
   \fi}

\ifundefined{myheadline}
    {\headline={\hbox to \textsize{\tentt\firstmark\hfil\tenrm\today\hbox
                to 4em{\hss\folio}}\hss}}
    {\expandafter\headline\expandafter{\myheadline}}

\ifundefined{myfootline}
    {\footline={\hfil}}
    {\expandafter\footline\expandafter{\myfootline}}
@ %def \ifundefined
<<nwmac.tex>>=
\def\semifilbreak{\vskip0pt plus1.5in\penalty-200\vskip0pt plus -1.5in}
\raggedbottom
@ %def \semifilbreak
<<nwmac.tex>>=
%
% \chapcenter macro to produce nice centered chapter titles
%
\def\chapcenter{\leftskip=0.5 true in plus 4em minus 0.5 true in
    \rightskip=\leftskip
    \parfillskip=0pt \spaceskip=.3333em \xspaceskip=.5em
    \pretolerance=9999 \tolerance=9999
    \hyphenpenalty=9999 \exhyphenpenalty=9999}
@ %def \chapcenter
<<nwmac.tex>>=
% \startsection{LEVEL}{INDENT}{BEFORESKIP}{AFTERSKIP}{STYLE}{HEADING}
%               #1     #2      #3          #4         #5     #6
%
%       LEVEL:          depth; e.g. part=0 chapter=1 sectino=2...
%       INDENT:         indentation of heading from left margin
%       BEFORESKIP:     skip before header
%       AFTERSKIP:      skip after header
%       STYLE:          style of heading; e.g.\bf
%       HEADING:        heading of the sectino
%
\def\startsection#1#2#3#4#5#6{\par\vskip#3 plus 2in
        \penalty-200\vskip 0pt plus -2in
    \noindent{\leftskip=#2 \rightskip=0.5true in plus 4em minus 0.5 true in
              \hyphenpenalty=9999 \exhyphenpenalty=9999
              #5#6\par}\vskip#4%
    {\def\code##1{[[}\def\edoc##1{]]}\message{[#6]}}
    \settocparms{#1}
    \def\themodtitle{#6}
    {\def\code{\string\code}\def\edoc{\string\edoc}%
    \edef\next{\noexpand\write\cont{\tocskip
        \tocline{\hskip\tocindent\tocstyle\relax\themodtitle}
                {\noexpand\the\pageno}}}\next % write to toc
    }%
}
@ %def \startsection
<<nwmac.tex>>=
\def\settocparms#1{
        \count255=#1
        \ifnum\count255<1
            \def\tocskip{\vskip3ptplus1in\penalty-100
                        \vskip0ptplus-1in}%
            \def\tocstyle{\bf}
            \def\tocindent{0pt}
        \else
            \def\tocskip{}
            \def\tocstyle{\rm}
            \dimen0=2em \advance\count255 by -1 \dimen0=\count255\dimen0
            \edef\tocindent{\the\dimen0}
        \fi
}
@ %def \settocparms
<<nwmac.tex>>=
\def\tocline#1#2{\line{{\ignorespaces#1}\leaders\hbox to .5em{.\hfil}\hfil
     \hbox to1.5em{\hss#2}}}
@ %def \tocline
<<nwmac.tex>>=
\def\section#1{\par \vskip3ex\noindent {\bf #1}\par\nobreak\vskip1ex\nobreak}
\def\chapter#1{\vfil\eject\startsection{0}{0pt}{6ex}{3ex}{\frtbf\chapcenter}{#1}}
\def\section#1{\startsection{1}{0pt}{4ex}{2ex}{\twlbf}{#1}}
\def\subsection#1{\startsection{2}{0pt}{2ex}{1ex}{\bf}{#1}}
\def\subsubsection#1{\startsection{3}{0pt}{1ex}{0.5ex}{\it}{#1}}
\def\paragraph#1{\startsection{4}{0pt}{1.5ex}{0ex}{\it}{#1}}

<<kernel>>

\def\filename#1{\vfil\eject\mark{#1}}

\def\begindocs#1{\filbreak}
\def\enddocs{\par}
\def\begincode#1{\par\nobreak
  \begingroup\setupcode\newlines\parindent=0pt\parskip=0pt
  \hsize=\codehsize\noindent\bchack}
\def\endcode{\endgroup}
{\catcode`\^^M=\active % make CR an active character
  \gdef\bchack#1^^M{\relax#1}%
}
@ %def \section \chapter \section \subsection \subsubsection \paragraph
@ %def \begindocs \enddocs \begincode \endcode \filename
<<nwmac.tex>>=
\edef\contentsfile{\jobname.toc } % file that gets table of contents info
\def\readcontents{\expandafter\input \contentsfile}

\newwrite\cont
\openout\cont=\contentsfile
\write\cont{\string\catcode`\string\@=11}% a hack to make contents
@ %def \readcontents \cont
<<nwmac.tex>>=
                                 % take stuff in plain.tex
\def\bye{%
    \write\cont{}% ensure that the contents file isn't empty
    \closeout\cont
    \vfil\eject\pageno=-1 % new page causes contents to be really closed
    \topofcontents\readcontents\botofcontents
    \vfil\eject\end}
\def\topofcontents{\vfil\mark{{\bf Contents}}}
\def\botofcontents{}
@ %def \bye \topofcontents \botofcontents
<<nwmac.tex>>=
\let\em=\it
% used to produce an itemized (bulleted) list in plain {\TeX}
% such lists can be nested
% mostly useful with WEB

% Usage:
% \itemize
% \item First thing
% \item second thing
% \enditemize

\newcount\listlevel
\listlevel=0
\newdimen\itemwidth
\itemwidth=3em

\def\itemize{\begingroup\advance\listlevel by1
    \def\item{\par\noindent
         \raise2pt\llap{$\scriptstyle\bullet$\ }\ignorespaces}%
    \def\nameditem##1{\par\noindent
         \llap{\rlap{##1}\hskip\itemwidth}\ignorespaces}%
    \par\advance\leftskip by\itemwidth\advance\rightskip by0.5\itemwidth}
\def\enditemize{\par\endgroup\noindent\ignorespaces}

\let\begindocument=\relax
@ %def \listlevel \itemwidth \itemize \enditemize
@
\section{Chunks} \nowebchunks
\twocolumn
\section{Index}
   \nowebindex
@
\end{document}


