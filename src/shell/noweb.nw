\section{Generating all outputs from a {\tt noweb} file}
The copyright applies both to the {\tt noweb} source and to the
generated shell script.
<<copyright notice>>=
# Copyright 1991 by Norman Ramsey.  All rights reserved.
# See file COPYRIGHT for more information.
@
Here's the organization of the source:
<<noweb>>=
#!/bin/sh
<<copyright notice>>
LIB=|LIBDIR|
markup=/tmp/nw$$.mrk errors=/tmp/nw$$.err roots=/tmp/nw$$.rts 
opt= verbose=1
trap '/bin/rm -f $markup $errors $roots; exit 1' 1 2 15	# clean up files
<<consume options and place them in [[opt]]>>
if [ $# -eq 0 ]; then <<complain of no args and exit>>; fi

for source do
  /bin/rm -f $errors $markup $roots || (echo "$0: Can't write temp files" 1>&2; exit 2)
  <<put marked-up source in [[$markup]]>>
  <<tangle all roots of [[$markup]]>>
  <<write {\TeX} output>>
done
/bin/rm -f $markup $errors $roots
exit 0
@
For markup, I use the [[nuweb]] conventions of ignoring leading and trailing spaces
and making each sequence of spaces and tabs act like a single space.
I also avoid doing anything fancy with tabs, in case people are horsing with
makefiles.
<<put marked-up source in [[$markup]]>>=
$LIB/markup -t $source | 
sed -e '/^<<@use |@defn>>/s/[ 	][ 	]*/ /g' \
    -e '/^<<@use |@defn>>/s/ $//' > $markup        || exit 1
<<@use |@defn>>=
@[ud][se][ef][ n]
@
Roots can't be permitted to contain any shell metacharacters.
<<write roots to [[$roots]], putting complaints in [[$errors]]>>=
nawk '<<awk program to print roots w/o metachars>>' errout=$errors $markup > $roots
<<awk program to print roots w/o metachars>>=
/^@defn / { chunk=substr($0,7) ; defined[chunk]=1 }
/^@use /  { chunk=substr($0,6) ; used[chunk]=1 }
END {
  for (chunk in defined) {
    if (defined[chunk]==1 && used[chunk]==0) 
      if (chunk ~ /[\[\](){} !$&<>*?;|^\\"`'"'"']/)
        printf "Root chunk @<<%s@>> contains spaces or metacharacters", chunk > errout
      else
        print chunk
  }
}
@  With this version, nuweb on noweb took 20 seconds.
<<old, inefficient tangle each root>>=
rootnames="`cat $roots`"
for root in $rootnames; do
  if [ -n "$verbose" ]; then echo "$root" 1>&1; fi
  $LIB/nt -R"$root" -t8 $opt < $markup | cpif "$root" || exit 1
done
<<tangle all roots of [[$markup]]>>=
$LIB/mnt -t8 $opt -all < $markup || exit 1
@ 
When writing {\TeX} output, I call [[$LIB/markup]] a second time to expand tabs.
%% timings on nuweb
% markup 0.4u 0.1s
% noxref 3.9u 1.0s
% nawk   6.5u 0.2s
<<write {\TeX} output>>=
texname=`echo $source | sed '/\./s/\.[^.]*$//'`
texname="$texname.tex"
if [ -n "$verbose" ]; then echo "$texname" 1>&1; fi
$LIB/markup $source | $LIB/noxref | $LIB/totex -delay | cpif $texname
<<consume options and place them in [[opt]]>>=
while [ $# -gt 0 ]; do
  case $1 in
    -q)  verbose= ; shift ;;
    -L*) opt="$1" ; shift ;;
    -*)  echo "Unrecognized option $1" 1>&2; exit 1 ;;
    *) break ;;
  esac
done
<<complain of no args and exit>>=
echo "Usage: $0 [-L[fmt]] file [...]" 1>&2; exit 1
@
