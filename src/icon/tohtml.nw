\section{Converting {\tt noweb} markup to {\tt HTML}}
This copyright applies both to the {\tt noweb} source and to the
generated code.
Thanks to Bill Trost for getting me started with an early version.
<<copyright notice>>=
# Copyright 1994 by Norman Ramsey.  All rights reserved.
# See file COPYRIGHT for more information.
@
The [[-raw]] option brackets HTML with [[\begin{rawhtml}]] and 
[[\end{rawhtml}]]; the purpose is to embed HTML in a {\LaTeX} 
document before converting the document with {\tt latex2html}.
[[braw]] and [[eraw]] hold those delimiters (or else empty strings).
<<*>>=
<<copyright notice>>
# Don't try to understand this file!  Look at icon/tohtml.nw in the noweb source!

procedure main(args)
  local delay, raw, where, localindex
  <<initialization>>
  every braw | eraw := ""
  delay := !args == "-delay"
  localindex := !args == "-localindex"	# produce local identifier xref?
  raw := !args == "-raw"
  if \raw then {braw := "\\begin{rawhtml}"; eraw := "\\end{rawhtml}"}
  while inputline := read() do inputline ? {
    <<scan and convert>>
  }
  write()
end
<<scan and convert>>=
<<@text>>
<<@nl>>
<<code chunks>>
<<@defn>>
<<docs chunks>>
<<@use>>
<<@xref>>
<<@index>>
<<others>>
  nil	# matches last else
@ 
[[ecode]] is the marker used at the end of the current code chunk.
If there is no cross-reference stuff at the end, we just use [[</pre>]];
otherwise we terminate whatever environment is used for the cross-reference stuff.
<<code chunks>>=
if ="@begin code " then	{ code := 1   ; writes(braw, "<pre>"); ecode := "</pre>" } else
if ="@end code "   then { code := nil ; previscode := 1 
                          <<dump pending cross-reference info>>
                          writes(ecode, eraw)                                    } else
@ %def previscode

We want to try to avoid emitting paragraph elements when the
preceding chunk is a code chunk, as tracked by [[previscode]].
Also, if we do slip in a paragraph, we may use the {\LaTeX} style.
<<docs chunks>>=
if ="@begin docs " then	{ if \previscode then writes(if /raw then "<p>" else "\\par")
                          previscode := &null
                          text := 0                                              } else
@
Sometimes it happens that a document-chunk anchor is put in a document chunk that
contains no text.  In that case, we put in a phony anchor at the end of the chunk so 
we won't lose the cross-reference.
<<docs chunks>>=
if ="@end docs " then  	{ write(braw, linklabel(\lastxreflabel, "*"), eraw)
                          lastxreflabel := &null                                 } else
@
Normally, if there's a pending anchor, we put it on the first available text line.
<<@text>>=
if ="@text " then 	{ text +:= *(line := tab(0))
			  if \quoting | \code then
			    writes((<<index anchor>>) | escapeSpecials(line))
		          else
                            writes((<<docs anchor>>) | line)                } else
<<index anchor>>=
2(line ? {tab(many(' \t')); not pos(0)}, 
  linkto(\lastindexref, line),
  lastindexref := &null)
<<docs anchor>>=
2(line ? {tab(many(' \t')); not pos(0)},
  line ? braw || linklabel(\lastxreflabel, 
                           (tab(many(' \t')) | "") || 
                            (if any('\\{}') then "*" else move(1))) ||
         eraw || tab(0),
  lastxreflabel := &null)
<<@nl>>=
if ="@nl" & pos(0) then { write()                                                } else
<<@defn>>=
if ="@defn " then 	{ writechunk(lastxreflabel, lastxrefref, 
                                     "dfn", name := tab(0), defns[name] || "=")
                          defns[name] := "+"                                     } else
<<initialization>>=
defns := table("")
<<@use>>=
if ="@use " then 	{ writechunk(lastxreflabel, lastxrefref, "i", tab(0))    } else 
@
Writing a chunk involves creating an anchor for it.
<<*>>=
procedure writechunk(label, ref, tag, name, suffix)
  /suffix := ""
  writes(linklabelto(label, ref, 
    "<" || tag || ">&lt;" || convquotes(name) || "&gt;" || suffix || "</" || tag || ">"))
  return
end
@
<<others>>= 
if ="@quote"    & pos(0) then 	{ quoting := 1   ; writes(braw, "<code>")        } else
if ="@endquote" & pos(0) then 	{ quoting := nil ; writes("</code>", eraw)       } else
<<others>>=
if ="@file "                  then { filename := tab(0); <<clear [[lastxref*]]>> } else
if ="@literal "               then { writes(tab(0))                              } else
if ="@header html "           then { <<write HTML header>>		         } else
if ="@trailer html" & pos(0)  then { <<write HTML trailer>>		         } else
@
<<write HTML header>>=
writes("<html><head><title>", tab(0), "</title></head><body>")
<<write HTML trailer>>=
write("</body></html>")
@
<<@xref>>=
if ="@xref " then {
  if fun := tab(upto(' ')) then {move(1); arg := tab(0)}
  else { fun := tab(0); arg := &null }
  case fun of { 
    <<cases for @xref>> 
    default : arg ? warn_unknown("xref " || fun)
  }
} else
<<cases for @xref>>=
"label"		: lastxreflabel := arg
"ref"		: lastxrefref   := arg
"prevdef"	: pendingprev   := arg
"nextdef"	: pendingnext   := arg
"beginuses"	: { <<dump pending cross-reference info>>           
                    <<code-to-blockquote>>
                    writes("This code is used ")
                    comma := ""; where := "here"; count := 1 }
"useitem"	: { writes(comma, linkto(arg, where || (1 < count | "")))
                    comma := ","; where := "U"; count +:= 1 }
"enduses"	: writes(".<p>")
"notused"	: { <<code-to-blockquote>>
                    writes("This code is written to a file (or else not used).<p>") }
<<clear [[lastxref*]]>>=
every lastxreflabel | lastxrefref := &null
<<dump pending cross-reference info>>=
if \pendingprev | \pendingnext then {<<code-to-blockquote>>}
if \pendingprev then
  if \pendingnext then
    write(linkto(pendingprev, "Previous"), " and ",
          linkto(pendingnext, "next"), " definitions.<p>")
  else
    write(linkto(pendingprev, "Previous"), " definition.<p>")
else
  if \pendingnext then
    write(linkto(pendingnext, "Next"), " definition.<p>")
every pendingprev | pendingnext := &null
@
The hack here is to put the supplementary information in a blockquote area
after the code.
<<code-to-blockquote>>=
if ecode == "</pre>" then {
  writes("</pre><blockquote>")
  ecode := "</blockquote>"
}
@
The HTML back end ignores [[@xref begindefs]], [[@xref defitem]], and
[[@xref enddefs]]; it uses the [[nextdef]] and [[prevdef]] links instead.
<<cases for @xref>>=
"begindefs" | "defitem" | "enddefs" : &null
@
<<cases for @xref>>=
"beginchunks" : { write(braw, "<h2>List of Chunks</h2><ul>") }
"chunkbegin"  : { writes("<li>"); comma := ": "; count := 0
                  arg ? { ref := tab(upto(' ')); =" "; name := tab(0) }
                  writechunk(&null, ref, "i", name) }
"chunkuse"    : { writes(comma, linkto(arg, "U" || (count +:= 1)));  comma := ", " }
"chunkdefn"   : { writes(comma, linkto(arg, "D" || (count +:= 1)));  comma := ", " }
"chunkend"    : write()
"endchunks"   : write("</ul>", eraw)
<<cases for @index>>=
"beginindex"  : { write(braw, "<h2>Index</h2><ul>") }
"entrybegin"  : { writes("<li>"); comma := ": "; count := 0
                  arg ? { ref := tab(upto(' ')); =" "; name := tab(0) }
                  writes(linklabelto("NWI-" || escapeSpecials(name), ref, name)) }
"entryuse"    : { writes(comma, linkto(arg, "U" || (count +:= 1)));  comma := ", " }
"entrydefn"   : { writes(comma, linkto(arg, "D" || (count +:= 1)));  comma := ", " }
"entryend"    : write()
"endindex"   : write("</ul>", eraw)
@
<<@index>>=
if ="@index " then {
  if fun := tab(upto(' ')) then {move(1); arg := tab(0)}
  else { fun := tab(0); arg := &null }
  case fun of { 
    <<cases for @index>> 
    default : arg ? warn_unknown("index " || fun)
  }
} else
@
The local identifier cross-reference doesn't show each use; it just shows
the identifiers that are defined, with links to the full index.
<<cases for @index>>=
"use" 	    : { lastindexref := lastxrefref; <<clear [[lastxref*]]>> }
"defn"      : { <<clear [[lastxref*]]>> }
"nl"        : &null # do nothing -- destroys line numbering
"begindefs" : if \localindex then
              { <<code-to-blockquote>>; writes("Defines"); comma := " " }
"isused"    : &null
"defitem"   : if \localindex then { 
                writes(comma, linkto("NWI-" || escapeSpecials(arg), escapeSpecials(arg)))
                comma := ", "
              }
"enddefs"   : if \localindex then write("; click for index entry.<p>")
"beginuses" | "isdefined" | "useitem" | "enduses" : &null  # use local links
@
\subsection{Support functions}
Here's all our anchor support goo.
<<*>>=
procedure linklabelto(label, ref, contents)
  local s
  s   := if \label | \ref then "<a"   else ""
  s ||:= " name=" || image(\label)
  s ||:= " href=" || image("#" || \ref)
  s ||:= if \label | \ref then ">"    else ""
  s ||:= contents
  s ||:= if \label | \ref then "</a>" else ""
  return s
end

procedure linkto(ref, contents)
  return linklabelto(&null, ref, contents)
end

procedure linklabel(label, contents)
  return linklabelto(label, &null, contents)
end
@
Lucky for us, {\tt HTML} has few special characters.  Unlucky for us,
we have to deal with each one seperately.  Nothing much to whine
about, really.
<<*>>=
procedure escapeSpecials (l)
  static escapes, specials
  initial {escapes := table(); 
           escapes["&"] := "&amp;"
           escapes["<"] := "&lt;"
           escapes[">"] := "&gt;"
           escapes["\""] := "&quot;"
	   specials := ''
           every specials ++:= key(escapes)
          }
  s := ""
  l ? { 
    while s ||:= tab(upto(specials)) do
      s ||:= escapes[move(1)]
    return s || tab(0)
  }
end
@
A special function is used to implement {\tt noweb}'s quoting 
convention within chunk names.
<<*>>=
procedure convquotes(s)
  r := ""
  escapeSpecials(s) ? {
    while r ||:= tab(find("[[")) do {
      ="[[" | stop("impossible missing [[")
      r ||:= "<code>" || tab(find("]]"))
      r ||:= tab(many(']')-2)
      ="]]" | stop("impossible missing ]]")
      r ||:= "</code>"
    }
    return r || tab(0)
  }
end
@
<<*>>=
procedure warn_unknown(tag)
  static warned
  initial warned := set()
  if not member(warned, tag) then {
    write(&errout, "Warning: unrecognized escape @", tag, tab(0))
    insert(warned, tag)
  }
  return
end
